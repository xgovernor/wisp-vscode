{
  "name": "wisp",
  "fileTypes": ["wisp"],
  "scopeName": "source.wisp",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#constants" },
    { "include": "#strings" },
    { "include": "#interpolation" },
    { "include": "#numbers" },
    { "include": "#operators" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.number-sign.wisp", "match": "#.*$" },
        { "name": "comment.line.double-slash.wisp", "match": "//.*$" }
      ]
    },
    "keywords": {
      "patterns": [
        { "name": "keyword.control.wisp", "match": "\\b(if|else|while|for|return|break|continue|import|from|as|let|constant|const|fn|function|async|await|match|try|catch|throw|show|ask|run|structure|enum|switch|case|default|do|sizeof)\\b" }
      ]
    },
    "types": {
      "patterns": [
        { "name": "storage.type.wisp", "match": "\\b((unsigned|signed)?\\s*(8|16|32|64)\\s*bit\\s*(number|float|integer)|character\\s*string|boolean|array|object|null|undefined|datetime|any|none|error)\\b" }
      ]
    },
    "constants": {
      "patterns": [
        { "name": "constant.language.wisp", "match": "\\b(true|false|null|undefined)\\b" }
      ]
    },
    "strings": {
      "patterns": [
        { "name": "string.quoted.double.wisp", "begin": "\\\"", "end": "\\\"", "patterns": [{ "name": "constant.character.escape.wisp", "match": "\\\\." }] },
        { "name": "string.quoted.single.wisp", "begin": "'", "end": "'", "patterns": [{ "name": "constant.character.escape.wisp", "match": "\\\\." }] },
        { "name": "string.quoted.backtick.wisp", "begin": "`", "end": "`", "patterns": [ { "include": "#interpolation" } ] }
      ]
    },
    "interpolation": {
      "patterns": [
        { "name": "meta.interpolation.wisp", "begin": "\\{", "end": "\\}", "patterns": [ { "name": "variable.other.wisp", "match": "[a-zA-Z_][a-zA-Z0-9_]*" } ] }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.wisp", "match": "\\b(0x[0-9a-fA-F]+|[0-9]+(\\.[0-9]+)?)\\b" }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.wisp", "match": "[+\\-*/%=!<>|&^~]" },
        { "name": "keyword.operator.english.wisp", "match": "\\b(greater|less|equal|not|or|and|is|than|to|by|post|pre|increase|decrease|then)\\b" }
      ]
    },
    "identifiers": {
      "patterns": [
        { "name": "variable.other.wisp", "match": "[a-zA-Z_][a-zA-Z0-9_]*" }
      ]
    }
  }
}
